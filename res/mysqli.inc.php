<?phpclass Database{    private $db;    public function __construct()    {        $this->db = new mysqli(            MYSQL_URI, MYSQL_USR, MYSQL_PWD, MYSQL_DBN        ) or die("Connect Error ({$this->db->connect_errno}) {$this->db->connect_error}");    }    public function __destruct()    {        $this->db->close();    }    public function IsAccountExist($id)    {        $result = $this->db->query("select * from login where login_id = '{$id}'");        if ($result->num_rows > 0)            return true;        else            return false;    }    public function CreateAccount($id, $password, $userName, $nickName, $dob, $email, $mobile, $street, $city, $country)    {        $ret_result = true;        $id = mysql_real_escape_string($id);        if (!$this->IsAccountExist($id)) {            $password = md5($password);            $userName = mysql_real_escape_string($userName);            $nickName = mysql_real_escape_string($nickName);            $dob = mysql_real_escape_string($dob);            $email = mysql_real_escape_string($email);            $mobile = mysql_real_escape_string($mobile);            $street = mysql_real_escape_string($street);            $city = mysql_real_escape_string($city);            $country = mysql_real_escape_string($country);            $this->db->autocommit(false);            $q1 = $this->db->query("insert into login values('$id','$password')");            $q2 = $this->db->query("insert into user values(null,'{$userName}','{$nickName}','{$dob}','{$email}','{$mobile}',0,null,'{$street}','{$city}','{$country}',null)");            $q3 = $this->db->query("insert into login_user values('{$id}',{$this->db->insert_id})");            if ($q1 && $q2 && $q3) {                $this->db->commit();            } else {                $ret_result = "Something went wrong";            }            $this->db->autocommit(true);        } else {            $ret_result = "Account is already created with this id";        }        return $ret_result;    }    public function Authenticate($id, $pass)    {        $id = mysql_real_escape_string($id);        $pass = md5($pass);        $result = $this->db->query("select * from login where login_id='{$id}' and password='{$pass}'");        if ($result->num_rows == 1)            return true;        else            return "Invalid user name or password";    }    public function CreateGroup($id, $groupName)    {        $ret_result = true;        $id = mysql_real_escape_string($id);        $groupName = mysql_real_escape_string($groupName);        $this->db->autocommit(false);        $q1 = $this->db->query("insert into ugroup values(null,'$groupName')");        $q2 = $this->db->query("insert into gadmin values('$id',{$this->db->insert_id})");        if ($q1 && $q2) {            $this->db->commit();        } else {            $ret_result = "Something went wrong, please try again";        }        $this->db->autocommit(true);        return $ret_result;    }    public function IsAdmin($id, $groupId)    {        $result = $this->db->query("select * from gadmin where login_id='{$id}' and group_id={$groupId}");        if ($result->num_rows == 1)            return true;        return false;    }    public function IsSM($id, $groupId)    {        $result = $this->db->query("select * from gspecialmember where login_id='{$id}' and group_id={$groupId}");        if ($result->num_rows == 1)            return true;        return false;    }    public function IsM($id, $groupId)    {        $result = $this->db->query("select * from gmember where login_id='{$id}' and group_id={$groupId}");        if ($result->num_rows == 1)            return true;        return false;    }    public function AddSM($id, $groupId, $memberId)    {        $id = mysql_real_escape_string($id);        $groupId = mysql_real_escape_string($groupId);        $memberId = mysql_real_escape_string($memberId);        if ($this->IsAdmin($memberId, $groupId) || $this->IsSM($memberId, $groupId) || $this->IsM($memberId, $groupId)) {            return "User is already present in group";        }        if ($this->IsAdmin($id, $groupId)) {            if ($this->db->query("insert into gspecialmember values('{$memberId}',{$groupId})")) {                return true;            } else {                return "Unregistered ID, can't be added";            }        } else {            return "Access denied";        }    }    public function AddM($id, $groupId, $memberId)    {        $id = mysql_real_escape_string($id);        $groupId = mysql_real_escape_string($groupId);        $memberId = mysql_real_escape_string($memberId);        if ($this->IsAdmin($memberId, $groupId) || $this->IsSM($memberId, $groupId) || $this->IsM($memberId, $groupId)) {            return "User is already present in group";        }        if ($this->IsAdmin($id, $groupId) || $this->IsSM($id, $groupId)) {            $result = $this->db->query("insert into gmember values('{$memberId}',{$groupId})");            if ($result)                return true;            return "Unregistered ID, can't be added";        } else {            return "Access denied";        }    }    public function AddQT($id, $groupId, $questionType)    {        $id = mysql_real_escape_string($id);        $groupId = mysql_real_escape_string($groupId);        $questionType = mysql_real_escape_string($questionType);        if (!$this->IsAdmin($id, $groupId)) {            return "Access denied";        }        if ($this->db->query("insert into question_type values(null,'{$questionType}',{$groupId})")) {            return $this->db->insert_id;        } else {            return false;        }    }    public function removeQT($id, $groupId, $qId)    {        $id = mysql_real_escape_string($id);        $groupId = mysql_real_escape_string($groupId);        $qId = mysql_real_escape_string($qId);        if ($this->IsAdmin($id, $groupId)) {            $result = $this->db->query("delete from question_type where type_id='{$qId}'");            if ($result) {                return true;            } else {                return false;            }        } else {            return "Access denied";        }    }    public function removeSM($id, $groupId, $memberId)    {        $id = mysql_real_escape_string($id);        $groupId = mysql_real_escape_string($groupId);        $memberId = mysql_real_escape_string($memberId);        if ($this->IsAdmin($id, $groupId) || $this->IsSM($id, $groupId)) {            $result = $this->db->query("delete from gspecialmember where login_id='{$memberId}' and group_id={$groupId}");            if ($result) {                return true;            } else {                return false;            }        } else {            return "Access denied";        }    }    public function removeM($id, $groupId, $memberId)    {        $id = mysql_real_escape_string($id);        $groupId = mysql_real_escape_string($groupId);        $memberId = mysql_real_escape_string($memberId);        if ($this->IsAdmin($id, $groupId) || $this->IsSM($id, $groupId)) {            $result = $this->db->query("delete from gmember where login_id='{$memberId}' and group_id={$groupId}");            if ($result) {                return true;            } else {                return false;            }        } else {            return "Access denied";        }    }    public function SendQuestion($id, $groupId, $question, $questionType, $questionDesc, $mark, $asked_time, $expire_time)    {        if ($this->db->query("insert into question values(null,'{$question}',{$questionType},'{$questionDesc}',FROM_UNIXTIME({$mark}),'{$asked_time}','{$expire_time}')")) {            return true;        } else {            return "Question is not sent";        }    }    public function SolveQuestion($id, $questionId, $answer, $solveTime)    {        $ret_result = true;        $this->db->autocommit(false);        $q1 = $this->db->query("insert into answer values(null,'{$answer}','{$solveTime}')");        $answer_id = $this->db->insert_id;        $q2 = $this->db->query("insert into question_answer values('{$questionId}','{$answer_id}')");        $q3 = $this->db->query("insert into solver values(null,'{$id}','{$answer_id}')");        if ($q1 && $q2 && $q3) {            $this->db->commit();        } else {            $ret_result = "Something went wrong";        }        $this->db->autocommit(true);        return $ret_result;    }    public function GetAdmin($id, $groupId)    {        if ($this->IsM($id, $groupId) || $this->IsSM($id, $groupId) || $this->IsAdmin($id, $groupId)) {            $result = $this->db->query("select login_id, user_name from v_admin where group_id={$groupId}");            if ($row = $result->fetch_array(2)) {                return $row;            }        } else {            return false;        }    }    public function GetAllM($id, $groupId)    {        if ($this->IsM($id, $groupId) || $this->IsSM($id, $groupId) || $this->IsAdmin($id, $groupId)) {            $result = $this->db->query("select login_id, user_name from v_member where group_id={$groupId}");            return $result->fetch_all();        } else {            return false;        }    }    public function GetAllSM($id, $groupId)    {        if ($this->IsM($id, $groupId) || $this->IsSM($id, $groupId) || $this->IsAdmin($id, $groupId)) {            $result = $this->db->query("select login_id, user_name from v_specialmember where group_id={$groupId}");            return $result->fetch_all();        } else {            return false;        }    }    public function GetAllQT($id, $groupId)    {        if ($this->IsM($id, $groupId) || $this->IsSM($id, $groupId) || $this->IsAdmin($id, $groupId)) {            $result = $this->db->query("select type_id, type_name from question_type where group_id={$groupId}");            return $result->fetch_all();        } else {            return false;        }    }    public function GetAllAdminGroups($id)    {        $result = $this->db->query("select ug.group_id, ug.group_name from ugroup ug, gadmin ga where ga.login_id='{$id}' && ga.group_id = ug.group_id");        return $result->fetch_all();    }    public function GetAllSMGroups($id)    {        $result = $this->db->query("select ug.group_id, ug.group_name from ugroup ug, gspecialmember ga where ga.login_id='{$id}' && ga.group_id = ug.group_id");        return $result->fetch_all();    }    public function GetAllMGroups($id)    {        $result = $this->db->query("select ug.group_id, ug.group_name from ugroup ug, gmember ga where ga.login_id='{$id}' && ga.group_id = ug.group_id");        return $result->fetch_all();    }    public function GetName($id)    {        $result = $this->db->query(            "select user_name from v_user_name where login_id='{$id}'"        );        if ($row = $result->fetch_assoc())            return $row['user_name'];        return false;    }    public function AddQ($id, $groupId, $question, $questionType, $questionDesc, $expire)    {        $groupId = mysql_real_escape_string($groupId);        if ($this->IsM($id, $groupId) || $this->IsSM($id, $groupId) || $this->IsAdmin($id, $groupId)) {            $question = mysql_real_escape_string($question);            $questionType = mysql_real_escape_string($questionType);            $questionDesc = mysql_real_escape_string($questionDesc);            $expire = mysql_real_escape_string($expire);            $result = $this->db->query("insert into question values(null,{$questionType},{$groupId},'{$question}','{$questionDesc}',default,'{$expire}','{$id}',false)");            return $result;        } else {            return false;        }    }    public function GetAllQ($id, $groupId)    {        $groupId = mysql_real_escape_string($groupId);        if ($this->IsM($id, $groupId) || $this->IsSM($id, $groupId) || $this->IsAdmin($id, $groupId)) {            $result = $this->db->query("select question_id, question, description, type_id, user_name, asked_time, image from question, v_user_info where group_id = {$groupId} && asker=login_id");//	  $result = $this->db->query("select question_id, question, description, type_id, user_name, asked_time from question, v_user_name where group_id = {$groupId} && asker=login_id");            return $result->fetch_all();        } else {            return false;        }    }    public function GetAnswers($id, $qId)    {        $qId = mysql_real_escape_string($qId);//	$result = $this->db->query("select question_id, question, description, type_id, user_name, image from question, v_user_info v where question_id={$qId} and v.login_id = asker");        $result = $this->db->query("select question_id, question, description, type_id, user_name from question, v_user_name v where question_id={$qId} and v.login_id = asker");        if ($row = $result->fetch_array()) {            $dataBundle[] = $row[0];            $dataBundle[] = $row[1];            $dataBundle[] = $row[2];            $dataBundle[] = $row[3];            $dataBundle[] = $row[4];        }        $result = $this->db->query("select avg(likes) from question_like where question_id={$qId}");        if ($row = $result->fetch_array()) {            $dataBundle[] = ($row[0] === null) ? '-.-' : sprintf("%.1f", $row[0]);        }        $result = $this->db->query("select likes from question_like where question_id = {$qId} and login_id='{$id}'");        if ($row = $result->fetch_assoc()) {            $dataBundle[] = $row['likes'];        } else {            $dataBundle[] = 0;        }        $result = $this->db->query("select qcomment, user_name from question_comment c, v_user_name v where question_id = {$qId} and c.login_id = v.login_id");        $dataBundle[] = $result->fetch_all();        $result = $this->db->query("select answer_id, answer, user_name from answer, v_user_name where question_id={$qId} and login_id = solver");        $ansResult = array();        while ($row = $result->fetch_assoc()) {            $singleAns = array();            $singleAns[] = $row['answer_id'];            $singleAns[] = $row['answer'];            $singleAns[] = $row['user_name'];            $result = $this->db->query("select avg(likes) from answer_like where answer_id = {$row['answer_id']}");            if ($rowA = $result->fetch_array()) {                $singleAns[] = ($rowA[0] === null) ? '-.-' : sprintf("%.1f", $rowA[0]);            }            $result = $this->db->query("select likes from answer_like where answer_id = {$row['answer_id']} and login_id='{$id}'");            if ($rowB = $result->fetch_array()) {                $singleAns[] = $rowB[0];            } else {                $singleAns[] = 0;            }            $aComment = $this->db->query("select acomment, user_name from answer_comment a, v_user_name v where answer_id = {$row['answer_id']} and v.login_id = a.login_id");            $singleAns[] = $aComment->fetch_all();            $ansResult[] = $singleAns;        }        $dataBundle[] = $ansResult;        $result = $this->db->query("SELECT DISTINCT image FROM v_user_info v, question q WHERE v.login_id = q.asker");        if ($row = $result->fetch_assoc()) {            $dataBundle[] = $row['image'];        } else {            $dataBundle[] = 0;        }        return $dataBundle;    }    public function AddQComment($id, $qId, $comment)    {        require_once $_SERVER['DOCUMENT_ROOT'] . '/res/libs/htmlpurifier/HTMLPurifier.auto.php';        $config = HTMLPurifier_Config::createDefault();        $config->set('HTML.Allowed', 'code,pre,b,i,u,br,p,div,span');        $purifier = new HTMLPurifier($config);        $comment = $purifier->purify($comment);        $qId = mysql_real_escape_string($qId);        $comment = mysql_real_escape_string($comment);        if ($this->db->query("insert into question_comment values('{$id}',{$qId},'{$comment}',default)")) {            return true;        } else {            return false;        }    }    public function AddAComment($id, $aId, $comment)    {        require_once $_SERVER['DOCUMENT_ROOT'] . '/res/libs/htmlpurifier/HTMLPurifier.auto.php';        $config = HTMLPurifier_Config::createDefault();        $config->set('HTML.Allowed', 'code,pre,b,i,u,div,span');        $purifier = new HTMLPurifier($config);        $comment = $purifier->purify($comment);        $aId = mysql_real_escape_string($aId);        $comment = mysql_real_escape_string($comment);        if ($this->db->query("insert into answer_comment values('{$id}',{$aId},'{$comment}',default)")) {            return true;        } else {            return false;        }    }    public function AddSolution($id, $qId, $soln)    {        require_once $_SERVER['DOCUMENT_ROOT'] . '/res/libs/htmlpurifier/HTMLPurifier.auto.php';        $config = HTMLPurifier_Config::createDefault();        $config->set('HTML.Allowed', 'b,i,u,code,pre,p,br,div,span');        $purifier = new HTMLPurifier($config);        $soln = $purifier->purify($soln);        $qId = mysql_real_escape_string($qId);        $soln = mysql_real_escape_string($soln);        if ($this->db->query("insert into answer values(null,'{$qId}','{$soln}',default,'{$id}')")) {            return true;        } else {            return false;        }    }    public function SetQuestionRank($id, $qId, $likes)    {        $qId = mysql_real_escape_string($qId);        $result = $this->db->query("select group_id from question where question_id={$qId}");        if ($row = $result->fetch_assoc()) {            $groupId = $row['group_id'];            if ($this->IsM($id, $groupId) || $this->IsSM($id, $groupId) || $this->IsAdmin($id, $groupId)) {                $result = $this->db->query("select likes from question_like where question_id={$qId} and login_id='{$id}'");                if ($result->num_rows == 0) {                    if ($this->db->query("insert into question_like values('{$id}',{$qId},{$likes})")) {                        return true;                    } else {                        return false;                    }                } else {                    if ($this->db->query("update question_like set likes={$likes} where login_id='{$id}' and question_id={$qId}")) {                        return true;                    } else {                        return false;                    }                }            } else {                return false;            }        }        return false;    }    public function SetAnswerRank($id, $aId, $likes)    {        $aId = mysql_real_escape_string($aId);        $result = $this->db->query("select group_id from answer a, question q where a.question_id=q.question_id and answer_id={$aId}");        if ($row = $result->fetch_assoc()) {            $groupId = $row['group_id'];            if ($this->IsM($id, $groupId) || $this->IsSM($id, $groupId) || $this->IsAdmin($id, $groupId)) {                $result = $this->db->query("select likes from answer_like where answer_id={$aId} and login_id='{$id}'");                if ($result->num_rows == 0) {                    if ($this->db->query("insert into answer_like values('{$id}',{$aId},{$likes})")) {                        return true;                    } else {                        return false;                    }                } else {                    if ($this->db->query("update answer_like set likes={$likes} where login_id='{$id}' and answer_id={$aId}")) {                        return true;                    } else {                        return false;                    }                }            } else {                return false;            }        }        return false;    }    public function GetUserInfo($id)    {        $result = $this->db->query(            "select user_name, nickname, login_id, mobile, dob,street,city,country from v_user_info where login_id='{$id}'"        );        return $result->fetch_all(1);    }    public function GetProfilePicture($id)    {        $result = $this->db->query(            "select image from v_user_info where login_id='{$id}'"        );        if ($row = $result->fetch_assoc())            return $row['image'];        return false;    }    public function UpdateInfo($id, $nickName, $mobile, $street, $city)    {        $ret_result = true;        $nickName = mysql_real_escape_string($nickName);        $mobile = mysql_real_escape_string($mobile);        $street = mysql_real_escape_string($street);        $city = mysql_real_escape_string($city);        $this->db->autocommit(false);        $q1 = $this->db->query("update v_user_info set nickname='{$nickName}',mobile={$mobile},street='{$street}',city='{$city}' where login_id='{$id}'");        if ($q1) {            $this->db->commit();        } else {            $ret_result = "something went wrong";        }        $this->db->autocommit(true);        return $ret_result;    }    public function getImage($id)    {        $result = $this->db->query(            "select image from v_user_info where login_id='{$id}'"        );        if ($row = $result->fetch_assoc())            return $row['image'];        return false;    }    public function imgUpload($id, $image)    {        $result = $this->db->query(            "update v_user_info set image='{$image}' where login_id='{$id}'"        );        $result = $this->db->query(            "select image from v_user_info where login_id='{$id}'"        );        if ($row = $result->fetch_assoc())            return $row['image'];        return false;    }    public function UpdateGrpName($id, $groupId, $name)    {        if ($this->IsAdmin($id, $groupId)) {            $result = $this->db->query(                "update ugroup set group_name='{$name}' where group_id='{$groupId}'"            );            $result = $this->db->query(                "select group_name from ugroup where group_id='{$groupId}'"            );            if ($row = $result->fetch_assoc())                return $row['group_name'];            return false;        }        return false;    }    public function DeleteGroup($id, $groupId)    {        $ret_result = true;        if ($this->IsAdmin($id, $groupId)) {            $this->db->autocommit(false);            $q1 = $this->db->query("delete from gadmin where group_id={$groupId}");            $q2 = $this->db->query("delete from gspecialmember where group_id={$groupId}");            $q3 = $this->db->query("delete from gmember where group_id={$groupId}");            if ($q1 && $q2 && $q3) {                $this->db->commit();            } else {                $ret_result = false;            }            $this->db->autocommit(true);        } else            return false;        return $ret_result;    }    public function GetGroupScore($id, $gid)    {        if ($this->IsM($id, $gid) || $this->IsSM($id, $gid) || $this->IsAdmin($id, $gid)) {            $result = $this->db->query("select sum(q.likes) from question_like q, question quest where quest.group_id={$gid} and quest.question_id = q.question_id and quest.asker = '{$id}' and q.login_id!='{$id}'");            $questLikes = 0;            if ($row = $result->fetch_array()) {                if ($row[0] != null) $questLikes = $row[0];            }            $result = $this->db->query("select sum(a.likes) from answer_like a, question quest, answer ans where ans.answer_id = a.answer_id and ans.question_id = quest.question_id and quest.group_id={$gid} and ans.solver = '{$id}' and a.login_id!='{$id}'");            $ansLikes = 0;            if ($row = $result->fetch_array()) {                if ($row[0] != null) $ansLikes = $row[0];            }            return array($questLikes, $ansLikes);        } else {            return false;        }    }    public function GetToppersList($id, $gid)    {        if ($this->IsM($id, $gid) || $this->IsSM($id, $gid) || $this->IsAdmin($id, $gid)) {            $result = $this->db->query("select id, sum(points) as points from (select id, points from question_rank where group_id={$gid} union all select id, points from answer_rank where group_id = {$gid}) dt group by id order by points desc");            return $result->fetch_all();        } else {            return false;        }    }}